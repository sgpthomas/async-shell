#+title: async-shell.el - Manage Shell Commands with Buffers

This package allows running a shell command in a buffer and provides conveniences for creating and managing these buffers. This is essentially an alternative to the built in =compile= command.

* Screenshots

=async-launch-shell= starts a new buffer with a command read from the minibuffer.

[[pictures/launch-command.gif]]

Once you have an =async-shell= buffer, you can rerun the command by calling =revert-buffer=.

 *Pinning a line number* (=,p=): When working on code, I often find it useful to pin the output to a certain line, so that I don't have to scroll and find a particular location every time I rerun a command.

[[pictures/pin-lineno.gif]]

*Re-run on save* (=,r=): Enabling =Reload on save= will re-run the command in that buffer every time a file is saved. I find this incredibly useful for debugging code.

[[pictures/reload-on-save.gif]]

* Org Babel

You can also create =async-shell= buffers from =org-babel=.

#+begin_src async-shell :name gif :results silent
,#+begin_src async-shell :name gif :results silent
name="reload-on-save"
ffmpeg -y -i ~/Desktop/$name.mov \
       -pix_fmt rgb8 -r 10 \
       pictures/$name.gif

gifsicle -O3 pictures/$name.gif -o pictures/$name.gif
,#+end_src
#+end_src

This is useful for keeping track of and executing complex commands that you need to execute for different projects.

Frequently I want to keep track of the commands that I'm running in an org buffer. But the command takes a long time, and so I don't want Emacs to block until the command finishes. I also want to keep an eye on the output. In normal elisp, =(async-shell-command)= is perfect for this.

This package is a very simple plugin that let's you run commands from org-babel in =(async-shell-command)=.

** org-babel configuration

To support =async-shell= blocks, all you need to do is add =(async-shell . t)= to your ='org-babel-load-languages=.

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((async-shell . t)
   ...))
#+end_src
